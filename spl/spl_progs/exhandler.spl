alias Cause S0;
alias VPagenum S1;
alias Ip_addr S2;
alias physicalSP S3;

Cause = EFR % 10;				// Gets value of cause field (size 1 char)
VPagenum = (EFR / 10) % 100;    // Gets value of BadVAddr 
Ip_addr = (EFR/1000);		//Gets value of IP at the point of exception
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

//print("In exhandler");

if (Cause != 0) then			// Not page fault
	if (Cause == 1) then
		print("Illegal instruction");
	endif;
	if (Cause == 2) then
		print("Illegal mem access");
	endif;
	if (Cause == 3) then
		print("Arithmetic exception");
	endif;
	if (Cause == 4) then
		print("Illegal Operand");
	endif;
	SP = SP + 1;
	[physicalSP] = 10;			// sysCallNo
	inline "JMP 11776";			// Jump to int 7 for exit
endif;

if ([PTBR + VPagenum*2] == -1) then		// Invalid page
	SP = SP + 1;
	[physicalSP] = 10;
	inline "JMP 11776";
endif;

alias i S4;
alias freePage S8;		
i = 25;
while (i < 64) do		// Find a free page
	if ([MEM_LIST + i] == 0) then
		[MEM_LIST + i] = 1;
		freePage = i;
		break;
	endif;
	i = i+1;
endwhile;

// Second chance page replacement algorithm


if (i == 64) then		// No free page
	alias faultInd S5;
	alias k S6;
	alias swapInd S7;
	faultInd = PTBR - 1024 + VPagenum*2;			// Points to page that caused fault

	while (1 == 1) do		// Scan all page table entries till victim is found
		k = (faultInd + 2) % 256;

		while (faultInd != k) do
			if (k %8 == 6) then 		// Page for stack
				k = (k + 2) % 256;
				continue;				// Skip stack
			endif;

			if ([PAGE_TABLE + k + 1] == "01") then		// Potential victim page
				if ([MEM_LIST + [PAGE_TABLE + k]] > 1) then 		// Shared page so skip
					k = (k+2) % 256;
					continue;
				endif;

				// Now we have a victim

				swapInd = 448;
				while (swapInd < 512) do
					if ([DISK_LIST + swapInd] == 0) then		// Swap out the page
						store([PAGE_TABLE + k], swapInd);
						[DISK_LIST + swapInd] = 1;				// Mark as used

						freePage = [PAGE_TABLE + k];
						[PAGE_TABLE + k] = swapInd;			// PTBR entry points to swap block
						[PAGE_TABLE + k + 1] = "00";			// Entry invalid

						break;
					endif;
					swapInd = swapInd + 1;
				endwhile;

				if (swapInd == 512) then 			// No space to swap out
					print("Can't swap out");
					SP = SP + 1;
					[physicalSP] = 10;
					inline "JMP 11776";				
				else
					break;
				endif;

			endif;

			if ([PAGE_TABLE + k + 1] == "11") then		// Give second chance
				[PAGE_TABLE + k + 1] = "01";
			endif;

			k = (k+2) % 256;	
		endwhile;

		if (faultInd != k) then		// We have a valid freePage
			break;
		endif;
	endwhile;
endif;

// Load required block to the free page

print("1");

if ([PAGE_TABLE + VPagenum*2] > 20 && [PAGE_TABLE + VPagenum*2] < 448) then			// disk block number
	load(freePage, [PAGE_TABLE + VPagenum*2]);
endif;

print("2");

if ([PAGE_TABLE + VPagenum*2] > 447) then							 	// swap block number
	load (freePage, [PAGE_TABLE + VPagenum*2]);
	[DISK_LIST + [PAGE_TABLE + VPagenum*2]] = [DISK_LIST + [PAGE_TABLE + VPagenum*2]] - 1;
endif;

print("3");

[PTBR + VPagenum*2] = freePage;			// Set PTBR entries for current process
[PTBR + VPagenum*2 + 1] = "11";

print("4");

SP = SP + 1;				// For ireturn
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

print(physicalSP);
[physicalSP] = Ip_addr;
//print("Handled");

breakpoint;

ireturn;
	
