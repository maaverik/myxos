load(7,1); load(8,2); 		//Load exception handler
load (9, 3); load (10, 4); 	//Load timer
load(11, 5); load(12,6); 	//Load int1 to memory
load(13,07); load(14,08); 	//Load int2 to memory
load(15,09); load(16,10); 	//Load int3 to memory
load(17,11); load(18,12); 	//Load int4 to memory
load(19,13); load(20,14); 	//Load int5 to memory
load(23,17); load(24,18); 	//Load int7 to memory

//Loading Init
load(25,21);		// Load 1st page of code from disk to memory
load(26,22);		// Load 2nd page of code from disk to memory
load(27,23);		// Load 3rd page of code from disk to memory

// Load Interrupt 1 Routine from disk to memory 

// Load the timer interrupt


PTBR = 1024;		// 1024 + PID * 8 
PTLR = 4;		// 3 code pages + 1 stack

[PTBR + 0] = 25;
[PTBR + 1] = "01";
[PTBR + 2] = 26;
[PTBR + 3] = "01";

[PTBR + 4] = 27;
[PTBR + 5] = "01";
[PTBR + 6] = 28;
[PTBR + 7] = "01";

[READY_LIST + 0] = 0;
[READY_LIST + 1] = 2;	// State = Ready
[READY_LIST + 2] = 0;
[READY_LIST + 3] = 3*512;
[READY_LIST + 4] = 0;
[READY_LIST + 5] = PTBR;
[READY_LIST + 6] = PTLR;

alias i S0;
i=15;
while (i<31) do
	[READY_LIST + i] = -1;
	[READY_LIST + i + 1] = -1;	
	i = i + 2;
endwhile;


SP = 3 * 512;		// Set stack pointer.

[28 * 512] = 0; 	// This is the location where call will look for IP, set logical addr 0

//Stage 7
load(5,19); 	//FAT
load(6,20); 	//DiskFreeList
//End of S7
alias counter S0;
counter = 0;
while ( counter <  128) do// 64 entries, each of size 2 words
	[ FILE_TABLE + counter + 0] = -1;// Set FAT Index to -1
	[ FILE_TABLE + counter + 1] =  0;// Set File Open Count to 0
	counter = counter + 2;// Move to next entry
endwhile;
breakpoint;
ireturn;
