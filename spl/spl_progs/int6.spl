alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

alias sysCallNo S1;
sysCallNo = [physicalSP - 1];

if (sysCallNo == 9) then 		// Code for exec()
	print("Execing");
	alias filename S2;
	filename = [physicalSP - 3];

	alias FATind S3;
	FATind = 0;
	
	//print("1");

	while (FATind < 64) do		// Search FAT for filename
		if (filename == [FAT + FATind*8]) then
			break;			
		endif;		
		FATind = FATind + 1;
	endwhile;
	
	if (FATind  == 64) then
		print("Doesn't exist");
		[physicalSP - 2] = -1;
		ireturn;
	endif;

	//print("2");

	alias basicBlock S4;			// Load basic block to scratchpad
	basicBlock = [FAT + FATind*8 + 2];
	if (basicBlock == -1) then
		print("Invalid Block");
		[physicalSP - 2] = -1;
		ireturn;
	endif;
	load(1, basicBlock);

	alias countNew S4;
	countNew = 0;
	alias i S10;
	i = 0;

	while (i < 256) do 			// Count number of code blocks in new process
		if ([SCRATCHPAD + i] != "" && [SCRATCHPAD + i] != -1) then
			countNew = countNew + 1;
		endif;
		i = i+1;
	endwhile;

	if (countNew > 3) then			// only 3 code blocks allowed
		print("Too many blocks");
		[physicalSP - 2] = -1;
		ireturn;
	endif;

	//print("3");

	i = 0;							// Count number of code pages in old process
	while (i < PTLR - 1) do 				// Because last entry for stack
		if ([PTBR + i*2 + 1] == "01" || [PTBR + i*2 + 1] == "11") then
		[MEM_LIST + [PTBR + i*2]] = [MEM_LIST + [PTBR + i*2]] - 1;		// Decrement No. pf processes sharing a page
		endif;

		if ([PTBR + i*2 + 1] == "00" && [PTBR + i*2] > 447) then
			[DISK_LIST + [PTBR + i*2]] = [DISK_LIST + [PTBR + i*2]] - 1;	// Decrement No. of processes sharing a swap block
		endif;

		i = i+1;
	endwhile;

	//print("4");

	while (i < countNew) do 			// Page table is initialised with disk blocks of new process
		[PTBR + i*2] = [SCRATCHPAD + i];
		[PTBR + i*2 + 1] = "00";
		i = i+1;
	endwhile;

	//breakpoint;

	while (i < 3) do 						// Invalidate rest of the entries
		[PTBR + i*2] = -1;
		[PTBR + i*2 + 1] = "00";
		i = i+1;
	endwhile;

	[PTBR + 7] = "01";		// For stack

	//print("5");

	i = 0;
	while (i < 8) do 				// Close all files opened by current process
		alias PCB S7;
		PCB = READY_LIST + 32*(PTBR - 1024)/8;		
		if ([PCB + 15 + i*2] != -1) then			// Decrement SWOFT count
			[FILE_TABLE + [PCB + 15 + i*2]*2 + 1] = [FILE_TABLE + [PCB + 15 + i*2]*2 + 1] - 1;
			
			if ([FILE_TABLE + [PCB + 15 + i*2]*2 + 1] == 0) then	// Invalidate entry
				[FILE_TABLE + [PCB + 15 + i*2]*2] = -1;
			endif;

			[PCB + 15 + i*2] = -1;		// Invalidate PPOFT entries
			[PCB + 15 + i*2 + 1] = -1;
		endif;
		i = i+1;
	endwhile;

	//print("6");

	SP = 3 * 512;				// Starting address of stack
	alias newphysicalSP S11;
	newphysicalSP = ([PTBR + 2*(SP/512)] * 512) + (SP % 512);
	[newphysicalSP] = 0;		// So IP is logical 0
	print("Success");
	ireturn;						// No return value required 	
endif;



if (sysCallNo == 11) then		// Code for getpid()
  alias PID S2;
  PID = (PTBR - 1024) / 8;
  [physicalSP - 2] = PID;
  print("PID is:");
  print(PID);
  ireturn;
endif;


if (sysCallNo == 12) then		// Code for getppid()
  alias PID S2;
  PID = (PTBR - 1024) / 8;
  [physicalSP - 2] = [READY_LIST + (32 * PID) + 31];		// PID of parent
  print("PPID is:");
  print([READY_LIST + (32 * PID) + 31]);
  ireturn;
endif;
