alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

alias sysCallNo S1;
sysCallNo = [physicalSP - 1];

if (sysCallNo == 8)	then			//Code for Fork()
	//print("Forking");
	alias PID S2;
	PID = (PTBR - 1024)/8;

	alias newPID S3;
	newPID = (PID + 1) % 32;

	while (newPID != PID) do
		if ([READY_LIST + newPID*32 + 1] == 0) then
			break;
		endif;
		newPID = (newPID + 1)%32;
	endwhile;

	if (newPID == PID) then
		print("No free PCB");
		[physicalSP - 2] = -1;
		ireturn;
	endif;

	alias childPTBR S4;
	childPTBR = 1024 + newPID*8;

	alias pageCount S10;
	pageCount = 0;

	alias i S5;
	i = 0;

	while (i < 64) do					// Check for one free page
		if ([MEM_LIST + i] == 0) then
			break;
		endif;
		i = i+1;
	endwhile;

	if (i == 64) then					// No free page
		print("Memory full");
		[physicalSP - 2] = -1;
		ireturn;
	endif;
	
	alias freePage S6;
	freePage = i;
	alias j S7;
	i = PTLR - 1;			// For copying stack
	
	[MEM_LIST + freePage] = 1;		// Set free page to used
	j = 0;
	while (j < 512) do			// Copy stack word by word
		[freePage*512 + j] = [[PTBR + i*2] * 512 + j];		//	[PTBR + i*2] is the parent's physical stack
		j = j+1;
	endwhile;

	[childPTBR + i*2] = freePage;			// Update child's PTBR fields
	[childPTBR + i*2 + 1] = "01";

	i = 0;					
	while (i < PTLR - 1) do				// Copy all PTBR entries
		[childPTBR + i*2] = [PTBR + i*2];
		[childPTBR + i*2 + 1] = [PTBR + i*2 + 1];
		
		if ([PTBR + i*2 + 1] == "01" || [PTBR + i*2 + 1] == "11") then
			[MEM_LIST + [PTBR + i*2]] = [MEM_LIST + [PTBR + i*2]] + 1;		// No. pf processes sharing a page
		endif;
		
		if ([PTBR + i*2 + 1] == "00" && [PTBR + i*2] > 447) then
			[DISK_LIST + [PTBR + i*2]] = [DISK_LIST + [PTBR + i*2]] + 1;	// No. of processes sharing a swap block
			store(6, 20);
		endif;

		i = i+1;
	endwhile;
	
	// Set child's PCB entries

	[READY_LIST + newPID*32] = newPID;		
	[READY_LIST + newPID*32 + 2] = BP;
	[READY_LIST + newPID*32 + 3] = SP - 1; 			// parent has IP in stack, but child has no ireturn to pop it
	[READY_LIST + newPID*32 + 4] = [physicalSP];		// IP is same as parent (it is logical address)
	[READY_LIST + newPID*32 + 5] = childPTBR;
	[READY_LIST + newPID*32 + 6] = 4;					// PTLR
	[READY_LIST + newPID*32 + 7] = R0;
	[READY_LIST + newPID*32 + 8] = R1;
	[READY_LIST + newPID*32 + 9] = R2;
	[READY_LIST + newPID*32 + 10] = R3;
	[READY_LIST + newPID*32 + 11] = R4;
	[READY_LIST + newPID*32 + 12] = R5;
	[READY_LIST + newPID*32 + 13] = R6;
	[READY_LIST + newPID*32 + 14] = R7;
	[READY_LIST + newPID*32 + 31] = PID;				// Parent PID stored in child PCB (stage 11)
	

	i = 0;
	while (i < 8) do 				// update per-process and system wide file table entries
		[READY_LIST + newPID*32 + 15 + i*2] = [READY_LIST + PID*32 + 15 + i*2];
		[READY_LIST + newPID*32 + 15 + i*2 + 1] = [READY_LIST + PID*32 + 15 + i*2 + 1];
		[FILE_TABLE + [READY_LIST + newPID*32 + 15 + i*2]*2 + 1] = [FILE_TABLE + [READY_LIST + newPID*32 + 15 + i*2]*2 + 1] + 1;
		i = i+1;
	endwhile;

	[READY_LIST + newPID * 32 + 1] = 1;		// State is ready

	[physicalSP - 2] = newPID;				// PID of child is returned by parent

	alias childPhysicalSP S8;
	childPhysicalSP = ([childPTBR + 2 * ((SP - 1) / 512)] * 512) + ((SP - 1) % 512);
	[childPhysicalSP - 1] = -2;				// return value of child is -2

	//print("Success");
	ireturn;

endif;



