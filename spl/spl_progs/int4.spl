alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP/512)] * 512) + (SP % 512);

alias sysCallNo S1;
sysCallNo = [physicalSP - 1];

alias PID S14;
if (PTBR < 1024 + 256) then
  PID = (PTBR - 1024)/8;
else
  PID = 32 + (PTBR - 61*512)/8;
endif;

alias PCB S12;
if (PID < 32) then
  PCB = READY_LIST + PID*32;
else
  PCB = 62*512 + (PID-32)*32;
endif;

if (sysCallNo == 5) then		//Code for Write()
  //print("Writing");
  alias fileDescriptor S2;
  alias wordToWrite S3;
  wordToWrite = [physicalSP - 3]; 	//Getting arguments from stack
  fileDescriptor = [physicalSP - 4];

//print("a");

if (fileDescriptor > 7 || fileDescriptor < 0) then	//Checking if fileDescriptor is valid
    print ("Invalid File");
    [physicalSP - 2] = -1;
    ireturn;
endif;

//print("b");

  alias processFileTable S4;
  alias PID S5;
  PID = (PTBR - 1024)/8;
  
  processFileTable = PCB + 15 + (2 * fileDescriptor); 
  if ([processFileTable] == -1) then	 //Check per-process table entry
    print ("Invalid entry");
    [physicalSP - 2] = -1;
    ireturn;
  endif;

//print("c");

  alias FATindex S5;
  FATindex = [FILE_TABLE + [processFileTable]*2]; 
  
  alias basicBlock S6;
  basicBlock = [FAT + FATindex*8 + 2];
  
  load (1, basicBlock);		//Find the basic block from the FAT table and load to scratchpad
  
 //print("d"); 
 
 alias lSeekBlock S7;
 alias dataBlock S8;
 lSeekBlock = [processFileTable + 1]/512;
 dataBlock = [512 + lSeekBlock];

  if (dataBlock == -1) then		//If data block does not exist, making a new one and adding in Basic Block
    alias i S9;
    i = 24;
    while (i < 448) do
      if ([DISK_LIST + i] == 0) then
        [DISK_LIST + i] = 1;
        break;
      endif;
      i = i + 1;
    endwhile;
    
    if (i == 448) then
      print("Disk block not empty");
      [physicalSP - 2] = -1;
      ireturn;
    endif;
    
    [512*6 + i] = 1; 			//Set entry for this free block to used in DFL
    dataBlock = i;
    [512 + lSeekBlock] = i;		//Add block number to basic block
    store(1, basicBlock);		//commit basic block to disk
    [FAT + FATindex*8 + 1] = [FAT + FATindex*8 + 1] + 512;		//Increment file size in FAT entry
    store(5, 19);		//FAT		
    store(6, 20);		//DFL
  endif;
  
  //print("e");

  load (1, dataBlock);
  alias offset S9;
  offset = [processFileTable + 1] % 512;
  
  //print("f");
  
  [512 + offset] = wordToWrite;			//Writing to the file

//print("g");

  store (1, dataBlock);
  [processFileTable + 1] = [processFileTable + 1] + 1;		//Increment LSEEK
  [physicalSP - 2] = 0;
  
//print("h");
  
endif;

ireturn;
