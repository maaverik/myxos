// PCBs in 1536 - 2559 and 62*512 - 64*512-1
// Page tables in 1024 - 1279 and 61*512 - 61*512+256

load(7,1);			//load exception handler
load(8,2);

//print("In startup");

[READY_LIST + 0] = 0;	//set PID of init to 0

//Don't load init for stage 10

//load(25,21);		//load init program
//load(26,22);		//init doesn't have FAT entry or basic block
//load(27,23);	

PTBR = 1024;		//physical address of page table
PTLR = 4;			//page table has 4 entries

[PTBR + 0] = 21; 	//set up entries for init program in page table
[PTBR + 1] = "00";	
[PTBR + 2] = 22; 		//The code block no. is stored instead of physical page no. for stage 10
[PTBR + 3] = "00";
[PTBR + 4] = 23; 
[PTBR + 5] = "00";
[PTBR + 6] = 25; 		//Memory is allocated for stack
[PTBR + 7] = "01";

[READY_LIST + 1] = 2;	//state of init process set to 2 (running)

SP = 3 * 512;		//value set to starting logical address

[25*512] = 0;		//physical address of the process stack set to 0 for implicitly setting IP to 0 on IRET

load (11, 5);		// interrupt 1
load (12, 6);

load (9, 3);		// timer interrupt
load (10, 4);


load(5, 19);		//load FAT
load(6, 20);		//load disk free list

alias counter S0;				//Set system wide open file table to -1
counter = 0;
while ( counter <  128) do			// 64 entries, each of size 2 words
	[ FILE_TABLE + counter + 0] = -1;	// Set FAT Index to -1
	[ FILE_TABLE + counter + 1] =  0;	// Set File Open Count to 0
	counter = counter + 2;			// Move to next entry
endwhile;	

alias i S0;
i = 15;
while (i < 31)	do						//Setting up the Per-Process File Open table
	[READY_LIST + i] = -1;
	[61*512 + i] = -1;
	i = i+1;
endwhile;

[READY_LIST + 31] = 0;		// Parent PID set to itself (stage 11)

load (13, 7);		//interrupt 2
load (14, 8);
 
load (15, 9);		//interrupt 3
load (16, 10);
 
load (17, 11);		//interrupt 4
load (18, 12);

load (19, 13);		//interrupt 5
load (20, 14);

load (21, 15);		//interrupt 6
load (22, 16);

load (23, 17);		//interrupt 7
load (24, 18);

i = 0;

while (i<26) do		//Set memory free list values to used till page 25 (stack for init)
	[MEM_LIST + i] = 1;
	i = i+1;
endwhile;

while(i<64) do			//Set rest to unused
	[MEM_LIST + i] = 0;
	i = i+1;
endwhile;

[MEM_LIST + 61] = 1;	// Page table
[MEM_LIST + 62] = 1;	// PCB
[MEM_LIST + 63] = 1;

i = 1;
while (i<32) do		//Set state of all PCBs except init to free
	[READY_LIST + i*32 + 1] = 0;
	[62*512 + i*32 + 1] = 0;
	i = i+1;
endwhile;

[62*512 + 1] = 0; 

i = 448;					//Set up swap area
while (i < 512) do
	[DISK_LIST + i] = 0;
	i = i+1;
endwhile;

store(6, 20);			//Commit DFL

//print("Startup done");

breakpoint;

ireturn;
